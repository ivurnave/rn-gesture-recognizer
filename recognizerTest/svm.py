line = [
[(0, 0), (-2, -16), (-7, -41), (-11, -72), (-12, -125), (-6, -184), (0, -234), (2, -267), (2, -283)],

[(0, 0), (-1, 2), (-3, 9), (-5, 20), (-6, 43), (-9, 69), (-11, 88), (-16, 107), (-19, 115), (-19, 117), (-19, 123), (-15, 135), (-14, 144), (-14, 147), (-12, 152)],

[(0, 0), (0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (1, 6), (1, 7), (1, 9), (1, 10), (1, 12), (1, 14), (1, 15), (1, 16), (1, 17), (2, 19), (2, 20), (2, 21), (2, 22), (4, 23), (4, 25), (4, 26), (4, 27), (4, 28), (4, 30), (4, 31), (4, 32), (4, 33), (4, 35), (4, 36), (4, 37), (4, 38), (4, 40), (2, 41), (2, 42), (2, 43), (1, 45), (1, 46), (1,47), (1, 48), (0, 48), (0, 51), (0, 52), (0, 53), (-1, 53), (-1, 54), (-1, 56), (-1, 57), (-1, 58), (-1, 59), (-1, 61), (-1, 62), (-1, 63), (-1, 64), (-1, 66), (-1, 68), (-1, 69), (-1, 70), (-1, 72), (-1, 73), (-1, 74), (-1, 75), (-1, 77), (-1, 78), (-1, 79), (-1, 80), (-1, 82), (-1, 83), (-1, 84), (-1, 85), (-1, 87), (-1, 88), (-1, 89), (-1, 90), (-1, 91), (-1, 94), (-1, 95), (-1, 96), (-1, 99), (-1, 100), (-1, 101), (-1, 103), (-1, 104), (-1, 105), (-1, 106), (-1, 108), (-1, 109), (-2, 111), (-2, 112), (-2, 114), (-2, 115), (-2, 116), (-2, 117), (-2, 119), (-2, 120), (-4, 126), (-4, 130), (-5, 131), (-5, 132), (-5, 133), (-5, 135), (-5, 136), (-5, 137), (-5, 140), (-5, 141), (-5, 142), (-5, 143)],

[(0,0),(0,-17),(0,-92),(3,-189),(9,-232)],

[(0,0),(0,4),(4,16),(6,44),(6,79),(6,128),(1,194),(-1,241),(-1,269),(-1,280)],

[(0,0),(0,2),(-1,4),(-1,9),(-2,17),(-2,24),(-2,29),(-2,32),(-2,33),(-2,34)],
]


carat = [
    [(0,0),(2,-3),(6,-12),(26,-51),(74,-133),(83,-151),(86,-154),(87,-154),(88,-154),(94,-151),(111,-143),(137,-130),(157,-116),(175,-91),(187,-68),(195,-47),(201,-32),(204,-17),(205,-7),(206,-3),(206,-1),(206,0),(206,1)],

    [(0,0),(-5,-6),(-17,-17),(-56,-60),(-78,-87),(-109,-109),(-115,-108),(-129,-101),(-155,-80),(-182,-50),(-199,-22),(-209,-1),(-214,12),(-218,20)],

    [(0,0),(-1,-4),(-2,-23),(3,-35),(10,-51),(18,-64),(29,-82),(59,-120),(69,-132),(77,-139),(84,-145),(91,-150),(99,-154),(107,-156),(113,-157),(122,-157),(128,-155),(139,-144),(144,-134),(148,-121),(152,-106),(156,-90),(162,-72),(168,-54),(172,-36),(177,-25),(179,-18),(181,-12),(183,-8),(184,-4)],

    [(0,0),(-1,1),(-2,1),(-3,0),(-5,-2),(-8,-6),(-10,-10),(-16,-19),(-18,-23),(-20,-28),(-22,-32),(-25,-37),(-28,-43),(-31,-48),(-38,-59),(-42,-65),(-46,-73),(-51,-80),(-56,-85),(-61,-92),(-65,-98),(-68,-102),(-71,-105),(-75,-108),(-78,-112),(-82,-115),(-85,-119),(-89,-122),(-93,-124),(-97,-127),(-101,-130),(-104,-132),(-106,-134),(-108,-135), (-111,-138),(-112,-139),(-113,-140),(-114,-141),(-115,-142),(-116,-142),(-117,-141),(-118,-140),(-119,-139),(-120,-138),(-123,-135),(-126,-130),(-131,-125),(-140,-112),(-149,-97),(-154,-89),(-156,-86),(-158,-81),(-160,-77),(-162,-73),(-164,-69),(-166,-65),(-168,-60),(-170,-55),(-171,-51),(-173,-46),(-175,-42),(-178,-37),(-182,-32),(-185,-27),(-187,-22),(-190,-17),(-192,-12),(-195,-7),(-198,-2),(-202,3),(-204,6),(-205,8),(-206,9),(-206,10),(-207,10),(-207,11)],

    [(0,0),(28,-71),(135,-150),(187,-134),(207,-109),(219,-73),(215,28)],

    [(0,0),(14,-22),(27,-48),(35,-59),(44,-71),(45,-72),(45,-71),(48,-68),(53,-63),(64,-53),(71,-47),(78,-42),(86,-36),(102,-27),(107,-23),(109,-21),(112,-20),(113,-20)]
]

circle= [
    [(0,0),(-21,-5),(-75,-20),(-107,-34),(-133,-47),(-155,-62),(-175,-76),(-197,-102),(-217,-130),(-223,-148),(-222,-160),(-215,-175),(-198,-196),(-166,-220),(-114,-243),(-62,-255),(-38,-256),(-28,-250),(-17,-238),(-7,-223),(1,-204),(14,-181),(23,-150),(28,-119),(25,-88),(20,-70),(11,-55),(-4,-38),(-20,-25),(-36,-18),(-49,-14)],

    [(0,0),(-5,0),(-12,1),(-18,3),(-24,5),(-40,9),(-52,10),(-88,3),(-98,-4),(-107,-14),(-117,-29),(-127,-51),(-139,-73),(-149,-91),(-156,-106),(-163,-119),(-166,-132),(-166,-146),(-164,-159),(-160,-174),(-156,-184),(-149,-196),(-138,-208),(-121,-222),(-103,-235),(-88,-243),(-76,-250),(-62,-254),(-46,-257),(-28,-259),(-11,-259),(4,-257),(15,-254),(27,-248),(36,-240),(46,-231),(54,-222),(62,-209),(67,-199),(71,-190),(74,-181),(76,-170),(79,-159),(79,-145),(79,-131),(77,-116),(74,-101),(68,-86),(61,-71),(55,-59),(51,-47),(46,-38),(39,-30),(33,-24),(26,-19),(19,-15),(12,-12),(5,-8),(1,-6),(-3,-5),(-9,-5),(-14,-4),(-17,-4)],

    [(0,0),(-2,-4),(-3,-20),(-1,-31),(3,-39),(8,-46),(15,-50),(24,-54),(34,-58),(49,-61),(63,-62),(76,-61),(87,-56),(95,-52),(102,-45),(108,-36),(114,-29),(119,-20),(124,-10),(131,0),(136,13),(141,24),(144,40),(147,58),(148,77),(148,97),(145,116),(140,136),(132,156),(111,189),(98,208),(84,221),(66,232),(47,236),(29,235),(9,227),(-13,214),(-34,199),(-53,183),(-71,163),(-84,142),(-98,120),(-106,100),(-110,84),(-112,67),(-110,47),(-106,28),(-98,11),(-87,-4),(-72,-18),(-53,-35),(-31,-49),(-9,-60),(5,-65),(11,-67),(17,-67),(28,-68),(42,-67),(59,-68),(70,-68),(75,-68),(78,-67),(79,-67)],

    [(0,0),(0,-7),(1,-13),(5,-31),(10,-43),(18,-52),(31,-64),(50,-74),(77,-87),(107,-95),(128,-98),(142,-95),(157,-90),(171,-82),(181,-68),(191,-50),(197,-30),(200,-7),(199,19),(197,41),(192,57),(179,83),(165,105),(154,123),(144,137),(134,145),(120,149),(102,148),(82,141),(63,128),(45,109),(28,90),(11,66),(-1,48),(-4,35),(-5,24),(-4,14),(-2,8)],

    [(0,0),(-7,4),(-13,7),(-32,8),(-45,4),(-57,-4),(-72,-29),(-72,-40),(-67,-53),(-56,-69),(-37,-86),(-18,-98),(-5,-104),(5,-107),(14,-104),(25,-98),(35,-89),(42,-77),(46,-61),(47,-45),(44,-28),(36,-12),(27,1),(14,12),(1,21),(-19,22),(-26,17),(-30,13),(-32,11)]
]

arch = [
    [(0,0),(-3,-18),(-11,-40),(-23,-79),(-40,-122),(-49,-158),(-55,-188),(-56,-210),(-56,-224),(-53,-231),(-51,-238),(-46,-248),(-39,-263),(-23,-278),(-3,-292),(24,-304),(57,-317),(94,-327),(116,-331),(127,-331),(137,-330),(148,-328),(160,-321),(173,-314),(181,-305),(191,-289),(199,-268),(208,-242),(215,-211),(219,-183),(219,-155),(218,-133),(217,-118),(216,-106),(215,-100),(215,-95),(215,-91),(214,-90)],

    [(0,0),(-1,-2),(-2,-7),(-2,-21),(-5,-96),(-8,-130),(-10,-149),(-10,-162),(-11,-171),(-9,-175),(-8,-179),(-8,-180),(-7,-182),(-7,-183),(-6,-183),(-5,-183),(0,-184),(33,-195),(114,-216),(153,-223),(168,-226),(177,-227),(180,-228),(180,-227),(179,-227),(178,-226),(177,-226),(176,-225),(176,-224),(175,-222),(175,-217),(175,-188),(177,-154),(181,-103),(183,-45),(177,-6),(179,11),(179,23),(180,31),(180,33),(180,35),(181,38),(181,39),(182,40),(182,41)],
    
    [(0,0),(0,-14),(1,-37),(2,-66),(8,-98),(11,-131),(13,-160),(15,-183),(15,-202),(15,-218),(20,-223),(33,-225),(57,-230),(91,-237),(119,-245),(129,-249),(130,-249),(132,-247),(133,-246),(134,-240),(140,-219),(146,-193),(155,-162),(164,-130),(172,-104),(177,-78),(177,-61),(177,-56),(178,-53),(181,-48),(185,-41),(187,-34),(188,-31)],

    [(0,0),(0,-15),(2,-39),(2,-72),(4,-95),(6,-103),(9,-108),(12,-111),(17,-113),(29,-117),(51,-123),(82,-127),(104,-127),(112,-122),(117,-114),(118,-98),(114,-78),(111,-58),(110,-41),(110,-27)],

    [(0,0),(0,-4),(-1,-5),(-5,-18),(-9,-33),(-14,-60),(-20,-86),(-27,-120),(-35,-154),(-37,-180),(-37,-198),(-38,-209),(-38,-211),(-39,-216),(-41,-219),(-43,-219),(-60,-221),(-86,-224),(-124,-224),(-159,-224),(-186,-224),(-197,-221),(-197,-220),(-198,-214),(-200,-200),(-200,-184),(-200,-163),(-200,-145),(-200,-120),(-200,-95),(-198,-64),(-198,-27),(-198,17),(-202,53),(-202,84),(-202,105),(-202,121),(-202,137)]
]

# print (line)

sample = [[0,0],[0,-20],[0,-69],[0,-142],[0,-192],[0,-221],[4,-236],[4,-239],[6,-239],[23,-240],[53,-242],[84,-242],[117,-244],[137,-244],[138,-242],[138,-240],[139,-239],[140,-237],[140,-225],[146,-173],[156,-103],[167,-37],[175,4]]

import nltk

def get_ltk(st):
    return nltk.edit_distance("lloooodnnrrrmmuuuupl", st)

def consecutive_count(string):
    ret = []
    prev = string[0]
    length = 0
    for char in string:
        if char == prev:
            length += 1
        else:
            ret.append((prev, length))
            length = 1
            prev = char
    ret.append((prev, length))       
    return ret


def get_states(sample):
    def max_min(coordinate_set):
        x_cors = [c[0] for c in coordinate_set] 
        y_cors = [c[1] for c in coordinate_set] 
        max_x = max(x_cors)
        min_x = min(x_cors)
        max_y = max(y_cors)
        min_y = min(y_cors)
        return (max_x, min_x, max_y, min_y)
        
    changes = ''
    prev = 'placeholder'
    edge = sample[0]
    max_x, min_x, max_y, min_y = max_min(sample)
    dx = abs(max_x - min_x)
    dy = abs(max_y - min_y)
    ext = max(dx, dy)/10
    for c in sample:
        dx = c[0] - edge[0]
        dy = c[1] - edge[1]
        if abs(dx) > ext or abs(dy) > ext :
            edge = c
            try:
                ratio = dx/(dy+0.0)
            except:
                ratio = 0
            # print (dx, dy, edge, ratio)
            if abs(ratio) < 0.5:
                if dy > 0:
                    dstate = 'u'
                else:
                    dstate = 'd'

            elif abs(ratio) > 2:
                if dx > 0:
                    dstate = 'r'
                else:
                    dstate = 'l'
            else:
                delta = ""
                if dx > 0 and dy > 0:
                    dstate = 'm'  #first quadrant
                elif dx > 0 and dy < 0:
                    dstate = 'n'  #second quadrant
                elif dx < 0 and dy < 0:
                    dstate = 'o'  #third quadrant
                else:
                    dstate = 'p'   #fourth quadrant
            # if prev != dstate:  
            changes += dstate
                # prev = dstate

    return changes


print ("\n\nline:")
for set in line:
    states = get_states(set)
    print (get_states(set), "   ", get_ltk(get_states(set)))
    print (consecutive_count(states))
    set.reverse()
    # print (get_states(set), "   ", get_ltk(get_states(set)))
print ("\n\ncarat:")
for set in carat:
    print (get_states(set), "   ", get_ltk(get_states(set)))
    set.reverse()
    # print (get_states(set), "   ", get_ltk(get_states(set)))
print ("\n\ncircle:")
for set in circle:
    states = get_states(set)
    print (get_states(set), "   ", get_ltk(get_states(set)))
    print (consecutive_count(states))
    set.reverse()
    set.reverse()
    # print (get_states(set), "   ", get_ltk(get_states(set)))
print ("\n\narch:")
for set in arch:
    states = get_states(set)
    print (get_states(set), "   ", get_ltk(get_states(set)))
    print (consecutive_count(states))
    set.reverse()
    set.reverse()
    # print (get_states(set), "   ", get_ltk(get_states(set)))